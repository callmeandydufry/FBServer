/*$T Common/List.h GC 1.140 10/10/07 10:06:27 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __LIST_H__
#define __LIST_H__

#include "TypeDefine.h"

class	CListHeader;
class	CListItem
{
public:

	void	DisConnect();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *GetPrevious();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetPrevious(CListItem *pItem);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetNext(CListItem *pItem);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *GetNext();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHeader(CListHeader *pHeader);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListHeader *GetHeader();


public:
	CListItem();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual ~CListItem()
	{ ;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	CListItem		*m_pPre;
	CListItem		*m_pNext;
	CListHeader		*m_pHead;
};



class CListHeader :
	public CListItem
{
	friend class	CListItem;
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 GetNum();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetNum(uint32 uNum);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *First();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *Next();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *NextCycle();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *ViewFirst();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *ViewNext();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *Last();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CListItem *Current();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetCurrent(CListItem *pItem);

	

public:
	int32		Get(CListItem *pItem);
	CListItem	*MoveTo(int32 _Idx);
	CListItem	*Remove();
	CListItem	*OutChain();
	BOOL		Add(CListItem *pItem);
	BOOL		RemoveAll();
	BOOL		OutAll();
	CListItem	*Previous();
	CListItem	*PreviousCycle();
	CListItem	*ViewPrevious();
	BOOL		Insert(CListItem *pItem);
	BOOL		Insert_Before_Current(CListItem *pItem);
	BOOL		Insert_After_Current(CListItem *pItem);
	

public:
	CListHeader();
	virtual		~CListHeader();

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	uint32		m_uNum;
	CListItem	*m_pEnd;
	CListItem	*m_pHead;
	CListItem	*m_pCurrent;
};
#endif
